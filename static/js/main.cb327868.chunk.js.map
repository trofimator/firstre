{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","Actions.js","Constants.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchChanged","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","PureComponent","Header","components_CounterButton","App","_this$props","searchField","onSearchChanged","isPanding","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","onRequestRobots","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","isPending","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb327868.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'> \r\n            <img alt='roobots' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (<Card\r\n                        key={i}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        email={robots[i].email} />);\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChanged}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search roobots' \r\n                onChange={searchChanged}\r\n                />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY:'scroll', border: '5px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError : true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>It is not good to see.</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { PureComponent } from 'react';\r\n\r\nclass CounterButton extends PureComponent {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.count !== nextState.count) {\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n    updateCount = () => {\r\n        this.setState((state) => {\r\n            return { count: state.count + 1 }\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>Count:{this.state.count}</button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n\r\n    }\r\n    render() {\r\n        return (<div>\r\n            <CounterButton color={'yellow'} />\r\n            <h1 className='f1'>RoobotFriens</h1>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots} from '../Actions';\r\nimport Header from '../components/Header';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPanding: state.requestRobots.isPanding,\r\n        error: state.requestRobots.error\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChanged: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    };\r\n}\r\n\r\nclass App extends Component {\r\n    render() {\r\n        const { searchField, onSearchChanged,robots, isPanding } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        });\r\n\r\n        return isPanding ?\r\n            <h1>Loading...</h1>\r\n            :\r\n            (\r\n                <div className='tc'>\r\n                   <Header />\r\n                    <SearchBox searchChanged={onSearchChanged} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCES,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './Constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCHFIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCES, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCES = 'REQUEST_ROBOTS_SUCCES';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCES,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './Constants';\r\n\r\n\r\nconst initialStateSearch = ({\r\n    searchField: ''\r\n});\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCHFIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialStateRobots = {\r\n    isPending:false,\r\n    robots:[],\r\n    error:''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPanding: true })\r\n        case REQUEST_ROBOTS_SUCCES:\r\n            return Object.assign({}, state, { robots: action.payload, isPanding: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPanding: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducer';\nimport 'tachyons';\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}